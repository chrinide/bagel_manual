.. _start_guide:

************
Installation
************

-------------
Prerequisites
-------------
    ===================  =====================================  ==============================
    MPI C++ compiler                                            C++11 and MPI-3 support
    GNU Libtool          https://www.gnu.org/software/libtool    
    GNU Autoconf         https://www.gnu.org/software/autoconf  Version 2.69 or newer
    GNU Automake         https://www.gnu.org/software/automake   
    Boost C++ Libraries  http://www.boost.org                   Version 1.53.0 or newer
    BLAS                 http://www.netlib.org/blas             Use optimized BLAS
    LAPACK               http://www.netlib.org/lapack           Use optimized LAPACK
    ScaLAPACK            http://www.netlib.org/scalapack        Use optimized ScaLPACK
    ===================  =====================================  ==============================

Intel MKL is strongly recommended for BLAS, LAPACK, and ScaLAPACK (distributed for free for academic users) 

-----------
Build BAGEL
-----------

* Automake ::

     glibtoolize (in Linux, "libtoolize" instead)
     aclocal
     autoconf
     autoheader
     automake -a
 
* Create an object directory ::
   
    mkdir obj
    cd obj

* Configure

  A minimal set of configure options is ::

    ../configure '--enable-mkl' 'LDFLAGS=-L$(BOOST_ROOT)/lib' '--with-include=-I$(BOOST_ROOT)/include'
   
  Configure options:
     | ``--with-mpi=value``  turns on MPI, where "value" can be "mvapich", "intel", or "openmpi".
                             However, Open MPI is not recommended. 
     | ``--enable-mkl``  turns on MKL extensions, such as efficient matrix transposition. MKL libraries are automatically detected.
     | ``--disable-scalapack``  will disable the use of ScaLapack (parallel Lapack) which is not recommended.
     | ``--disable-smith``  will disable the code generated by SMITH which is not recommended.
     | ``--with-include``  can be used to specifically include paths.
     | ``--with-libxc`` turns on the interface to libxc.
     | ``CXXFLAGS=-DNDEBUG`` deactivates the debugging mode. It is absolutely essential to specify "-DNDEBUG" for release builds.

  Example (Release build on the Shiozaki group's cluster) ::

       ../configure 'LDFLAGS=-L/usr/local/boost/boost_1_59_0_gcc-5.2.0/lib'
       'CXXFLAGS=-DNDEBUG -Wall -Wextra -Wno-type-limits -Wno-deprecated-declarations 
       -Wno-sign-compare -Wno-unused-function -Wno-unused-parameter -Werror -O3 -mavx' 
       '--enable-mkl' '--with-include=-I/usr/local/boost/boost_1_59_0_gcc-5.2.0/include
       -I/opt/intel/mkl-11.3/mkl/include' '--with-mpi=intel' '--enable-static' '--disable-shared' 
       'CC=/usr/local/gcc/gcc-5.2.0/bin/gcc' 'CXX=/usr/local/gcc/gcc-5.2.0/bin/g++'

* Compile ::

    make -j4
    make install

* Test run ::

    ./BAGEL Your_PATH_to_BAGEL/test/benzene_svp_mp2.json

