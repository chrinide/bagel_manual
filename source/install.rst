.. _installation:

************
Installation
************

============
Prerequisite
============

.. topic:: ``Required``

   | C++ compiler (support C++11 features)
   | MPI comipler (support MPI-3 standard)
   | `GNU Libtool <https://www.gnu.org/software/libtool/>`_
   | `GNU Autoconf <https://www.gnu.org/software/autoconf/autoconf.html>`_
   | `GNU AutoMake <https://www.gnu.org/software/automake/>`_
   | `Boost C++ Libraries <http://www.boost.org/>`_ (Version 1.53 or newer)
   | BLAS (Basic Linear Algebra Subprograms)
   | LAPACK (Linear Algebra Package)

.. topic:: ``**Strongly Recommended** for BLAS & LAPACK``

   | `Intel MKL <https://software.intel.com/en-us/intel-mkl>`_ (Intel Math Kernel Library)

===========
Build BAGEL
===========

 * Automake

   1. glibtoolize (in Linux, "libtoolize" instead)
   #. aclocal
   #. autoconf
   #. autoheader
   #. automake -a
 
 * Create an object directory & Configure
   
   1. mkdir obj
   #. cd obj
   #. ``../configure 'LDFLAGS=-L/opt/local/lib -lblas -llapack``
   
    Configure Options
     * ``--with-mpi``  turns on MPI (automatically detect mpicxx etc from PATH). Can specify your MPI implementation.
     * ``--enable-mkl``  turns on MKL extensions, such as efficient matrix transposition. MKL libraries are automatically detected.
     * ``--disable-scalapack``  will disable use of ScaLapack (parallel Lapack). Not recommended.
     * ``--with-include``  can be used to specify include paths.
     * ``--with-libxc`` turns on the interface to libxc.
     * ``--enable-smith``  turns on the code generated by SMITH (CASPT2 gradients, MRCI, etc).
     * ``CXXFLAGS=-DNDEBUG`` is recommended for release build to strip out assert statments
     * Example (Release build on the Shiozaki group's cluster)::

       ../configure 'LDFLAGS=-L/usr/local/boost/boost_1_59_0_gcc-5.2.0/lib' 'CXXFLAGS=-DNDEBUG -Wall -Wextra -Wno-type-limits -Wno-deprecated-declarations -Wno-sign-compare -Wno-unused-function -Wno-unused-parameter -Werror -O3 -mavx' '--enable-mkl' '--with-include=-I/usr/local/boost/boost_1_59_0_gcc-5.2.0/include -I/opt/intel/mkl-11.3/mkl/include' '--with-mpi=intel' '--enable-static' '--disable-shared' 'CC=/usr/local/gcc/gcc-5.2.0/bin/gcc' 'CXX=/usr/local/gcc/gcc-5.2.0/bin/g++' 

 * Compile

   1. make -j4
   #. mkae install
   #. test run: ``BAGEL Your_PATH_to_BAGEL/test/benzene_svp_mp2.in``

 * Optional features

   : `LIBINT <https://github.com/evaleev/libint>`_ :

      BAGEL can use `LIBINT <https://github.com/evaleev/libint>`_ by Edward Valeev (Virginia Tech). Although BAGEL's ERI is competitive, LIBINT is more efficient for gradient integrals than the native code in BAGEL (due to our laziness!).
      LIBINT should be compiled with following options (Please see the Libint Wiki for details). Note that you might need to specify library and include paths as well.
      ::

        '--with-max-am=4' '--with-eri3-max-am=6' '--with-eri2-max-am=6' '--enable-eri3=1' '-enable-eri=1' '--enable-eri2=1' '--disable-unrolling' '--enable-generic-code' '--enable-contracted-ints' '--with-cartgauss-ordering=bagel' '--disable-eri3-pure-sh' '--disable-eri2-pure-sh'

      Note that the last two flags above are not necessary if one uses only spherical basis sets.
      
      On the BAGEL side, you need to configure with
      ::

        'CXXFLAGS=-DLIBINT_INTERFACE -L/usr/local/libint/2.x.y-stable/lib -lint2'

      You also need to have include paths (append the following to --with-include when you configure BAGEL)
      ::

        -I/usr/local/libint/2.x.y-stable/include/libint2 -I/usr/local/libint/2.x.y-stable/include

      Latest LIBINT tested: 2.1.0 beta2 (Dec. 2015) `Link Here <https://github.com/evaleev/libint@3f1c16c158c3866ee6eb2d01ce371ca4019dccb2>`_
